{"version":3,"file":"store.js","sourceRoot":"","sources":["../../../src/service/store.ts"],"names":[],"mappings":";;;AAAA,0CAAkE;AAClE,2CAAuC;AACvC,0DAAqD;AACrD,2CAAuC;AAEvC;;GAEG;AACH,MAAa,KAAK;IAUd;;OAEG;IACI,MAAM,CAAC,cAAc,CACxB,MAAgC,EAChC,MAGC;QAED,mCAAmC;QACnC,IAAI,QAAQ,GAAkB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA;QACvD,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,oBAAY,CAAC,cAAc,CAAgC,CAAA;QAEzG,2CAA2C;QAC3C,IAAI,CAAC,QAAQ;YAAE,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;QAErD,cAAc;QACd,IAAI,CAAC,MAAM,EAAE;YACT,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;gBAC7B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;oBACnB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAA;iBACpD;YACL,CAAC,CAAC,CAAA;YAEF,OAAO,MAAM,CAAA,CAAC,qBAAqB;SACtC;QAED,UAAU;QACV,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG;YAC1B,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC;SACzC,CAAA;QAED,OAAO,MAAM,CAAA,CAAC,qBAAqB;IACvC,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,YAAY,CAAC,UAA2B;QAClD,MAAM,EAAE,GAAsB,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAA;QAEzD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAkB,CAAA;IACjF,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,UAAU,CAAC,UAA2B;QACjD,oDAAoD;QACpD,2DAA2D;QAC3D,IAAI,UAAU,YAAY,8BAAa;YAAE,OAAO,UAAU,CAAA;QAE1D,iGAAiG;QACjG,OAAO,qBAAS,CAAC,aAAa,CAAC,UAAU,CAAC,CAAA;IAC9C,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,cAAc,CAAC,MAAgC;QAC1D,MAAM,EAAE,GAAsB,qBAAS,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;QAC7D,MAAM,QAAQ,GAAkB;YAC5B,EAAE;YACF,IAAI,EAAE,MAAuB;YAC7B,IAAI,EAAE,EAAE;SACX,CAAA;QAED,6BAA6B;QAC7B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QAE7B,OAAO,QAAQ,CAAA,CAAC,uBAAuB;IAC3C,CAAC;;AAlFL,sBAmFC;AAlFG;;GAEG;AACY,eAAS,GAAoB,EAAE,CAAA;AAC9C;;GAEG;AACW,eAAS,GAAc,IAAI,qBAAS,EAAE,CAAA","sourcesContent":["import { Constructable, MetadataKeys, core } from '../utils/types'\r\nimport { Container } from './container'\r\nimport { InjectorToken } from '../lib/injector-token'\r\nimport { Reflector } from './reflector'\r\n\r\n/**\r\n * The Store service is wrapping all application's state.\r\n */\r\nexport class Store {\r\n    /**\r\n     * @property `injectors` injector store providers.\r\n     */\r\n    private static injectors: core.Injector[] = []\r\n    /**\r\n     * @property `container` Class instance.\r\n     */\r\n    public static container: Container = new Container()\r\n\r\n    /**\r\n     * ...\r\n     */\r\n    public static defineInjector(\r\n        Target: Constructable | Function,\r\n        inject?: {\r\n            index: number\r\n            Injectable: core.Injectable\r\n        }\r\n    ): Constructable | Function {\r\n        // Injector & paramTypes variables.\r\n        let injector: core.Injector = this.findInjector(Target)\r\n        const paramTypes = this.container.get(Target, MetadataKeys.__paramtypes__) as Constructable[] | undefined\r\n\r\n        // If there is no injector will create one.\r\n        if (!injector) injector = this.createInjector(Target)\r\n\r\n        // Injectable.\r\n        if (!inject) {\r\n            paramTypes?.forEach((param, i) => {\r\n                if (!injector.deps[i]) {\r\n                    injector.deps[i] = { id: this.injectorId(param) }\r\n                }\r\n            })\r\n\r\n            return Target // Return the target.\r\n        }\r\n\r\n        // Inject.\r\n        injector.deps[inject.index] = {\r\n            id: this.injectorId(inject.Injectable)\r\n        }\r\n\r\n        return Target // Return the target.\r\n    }\r\n\r\n    /**\r\n     * ...\r\n     */\r\n    public static findInjector(Injectable: core.Injectable): core.Injector {\r\n        const id: core.InjectableId = this.injectorId(Injectable)\r\n\r\n        return this.injectors.find((injector) => injector.id === id) as core.Injector\r\n    }\r\n\r\n    /**\r\n     * ...\r\n     */\r\n    private static injectorId(Injectable: core.Injectable): core.InjectableId {\r\n        // NOTE: Check if injectable is an instanceof Token.\r\n        // return a Token instance with the name property as an Id.\r\n        if (Injectable instanceof InjectorToken) return Injectable\r\n\r\n        // Otherwise return the class instance which is `Token instance with the name property` as an Id.\r\n        return Reflector.getInjectorId(Injectable)\r\n    }\r\n\r\n    /**\r\n     * ...\r\n     */\r\n    private static createInjector(Target: Constructable | Function): core.Injector {\r\n        const id: core.InjectableId = Reflector.setInjectorId(Target)\r\n        const injector: core.Injector = {\r\n            id,\r\n            Type: Target as Constructable,\r\n            deps: []\r\n        }\r\n\r\n        // push values into injector.\r\n        this.injectors.push(injector)\r\n\r\n        return injector // return the injector.\r\n    }\r\n}\r\n"]}
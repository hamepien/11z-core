{"version":3,"file":"reflector.js","sourceRoot":"","sources":["../../../src/service/reflector.ts"],"names":[],"mappings":";;;AAAA,0CAA4D;AAC5D,0DAAqD;AACrD,mCAA+B;AAE/B,MAAa,SAAS;IAClB;;OAEG;IACI,MAAM,CAAC,aAAa,CAAC,MAAgC;QACxD,MAAM,EAAE,GAAkB,IAAI,8BAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;QAExD,qEAAqE;QACrE,aAAK,CAAC,SAAS,CAAC,MAAM,CAAgB,MAAM,EAAE,EAAE,EAAE,oBAAY,CAAC,mBAAmB,CAAC,CAAA;QAEnF,OAAO,EAAE,CAAA,CAAC,iBAAiB;IAC/B,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,aAAa,CAAC,MAAqB;QAC7C,OAAO,aAAK,CAAC,SAAS,CAAC,GAAG,CAAgB,MAAM,EAAE,oBAAY,CAAC,mBAAmB,CAAC,CAAA;IACvF,CAAC;CACJ;AAnBD,8BAmBC","sourcesContent":["import { Constructable, MetadataKeys } from '../utils/types'\r\nimport { InjectorToken } from '../lib/injector-token'\r\nimport { Store } from './store'\r\n\r\nexport class Reflector {\r\n    /**\r\n     * ...\r\n     */\r\n    public static setInjectorId(Target: Constructable | Function): InjectorToken {\r\n        const id: InjectorToken = new InjectorToken(Target.name)\r\n\r\n        // define a new metadata object and set it up in the container Store.\r\n        Store.container.define<InjectorToken>(Target, id, MetadataKeys.__core_injectable__)\r\n\r\n        return id // return the id.\r\n    }\r\n\r\n    /**\r\n     * ...\r\n     */\r\n    public static getInjectorId(Target: Constructable): InjectorToken {\r\n        return Store.container.get<InjectorToken>(Target, MetadataKeys.__core_injectable__)\r\n    }\r\n}\r\n"]}
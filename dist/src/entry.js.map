{"version":3,"file":"entry.js","sourceRoot":"","sources":["../../src/entry.ts"],"names":[],"mappings":";;;AAAA,2CAAuC;AAGvC;;GAEG;AACH,MAAa,QAAQ;IACjB;;OAEG;IACI,MAAM,CAAC,GAAG,CAAc,MAAwB;QACnD,OAAO;QACP,MAAM,QAAQ,GAAkB,aAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA;QAE1D,SAAS;QACT,IAAI,CAAC,QAAQ;YAAE,MAAM,IAAI,KAAK,CAAC,iHAAiH,CAAC,CAAA;QAEjJ,OAAO,IAAI,CAAC,oBAAoB,CAAI,QAAQ,CAAC,CAAA;IACjD,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,oBAAoB,CAAI,QAAuB;QAC1D,uDAAuD;QACvD,IAAI,QAAQ,CAAC,KAAK;YAAE,OAAO,QAAQ,CAAC,KAAU,CAAA;QAE9C,kBAAkB;QAClB,MAAM,IAAI,GAAsB,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACtD,MAAM,WAAW,GAA8B,aAAK,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;YAEzE,SAAS;YACT,IAAI,CAAC,WAAW;gBAAE,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAA;YAEzE,OAAO,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAA;QACjD,CAAC,CAAC,CAAA;QAEF,sBAAsB;QACtB,QAAQ,CAAC,KAAK,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAA;QAE3C,OAAO,QAAQ,CAAC,KAAU,CAAA,CAAC,6BAA6B;IAC5D,CAAC;CACJ;AApCD,4BAoCC","sourcesContent":["import { Store } from './service/store'\r\nimport { Constructable, core } from './utils/types'\r\n\r\n/**\r\n * A top-level class injector.\r\n */\r\nexport class Injector {\r\n    /**\r\n     * ...\r\n     */\r\n    public static get<T = unknown>(Target: Constructable<T>): T {\r\n        // TODO\r\n        const injector: core.Injector = Store.findInjector(Target)\r\n\r\n        // throw.\r\n        if (!injector) throw new Error('GetInjectorError: You are missing something or doing something incorrectly. Use @Injectable or @Inject instead.')\r\n\r\n        return this.resolveInjectorValue<T>(injector)\r\n    }\r\n\r\n    /**\r\n     * ...\r\n     */\r\n    private static resolveInjectorValue<T>(injector: core.Injector): T {\r\n        // Check if injector value does exist then return them.\r\n        if (injector.value) return injector.value as T\r\n\r\n        // deps constance.\r\n        const deps: core.Dependency[] = injector.deps.map((dep) => {\r\n            const depInjector: core.Injector | undefined = Store.findInjector(dep.id)\r\n\r\n            // Throw.\r\n            if (!depInjector) throw new Error('DepInjectorError: An error occurred.')\r\n\r\n            return this.resolveInjectorValue(depInjector)\r\n        })\r\n\r\n        // set injector value.\r\n        injector.value = new injector.Type(...deps)\r\n\r\n        return injector.value as T // return the injector value.\r\n    }\r\n}\r\n"]}
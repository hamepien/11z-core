{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/utils/types.ts"],"names":[],"mappings":";;;AAaA;;GAEG;AACH,IAAY,YAIX;AAJD,WAAY,YAAY;IACpB,+DAA+C,CAAA;IAC/C,4DAA4D;IAC5D,oDAAoC,CAAA;AACxC,CAAC,EAJW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAIvB","sourcesContent":["import { InjectorToken } from '../lib/injector-token'\r\n\r\n/**\r\n * NonSafe type is `any` type.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type NonSafe = any // Any type.\r\n\r\n/**\r\n * Generic type for class definitions.\r\n */\r\nexport type Constructable<T = unknown> = new (...args: NonSafe[]) => T\r\n\r\n/**\r\n * Possible metadata keys.\r\n */\r\nexport enum MetadataKeys {\r\n    __core_injectable__ = 'key:__core_injectable__',\r\n    // emitDecoratorMetadata's generated key: design:paramtypes.\r\n    __paramtypes__ = 'design:paramtypes'\r\n}\r\n\r\n/**\r\n * Core types wrapper.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-namespace\r\nexport namespace core {\r\n    /**\r\n     * Possible injectable types.\r\n     */\r\n    export type Injectable<T = unknown, S = unknown> = Constructable<T> | InjectorToken<S>\r\n    /**\r\n     * Possible injectable id type.\r\n     */\r\n    export type InjectableId<S = unknown> = InjectorToken<S>\r\n    /**\r\n     * Possible injector types.\r\n     */\r\n    export interface Injector<T = unknown, S = unknown> {\r\n        id: InjectableId<S>\r\n        Type: Constructable<T>\r\n        deps: Dependency<S>[]\r\n        value?: unknown\r\n    }\r\n    /**\r\n     * Possible injectable dependency types.\r\n     */\r\n    export interface Dependency<S = unknown> {\r\n        id: InjectableId<S>\r\n    }\r\n}\r\n"]}